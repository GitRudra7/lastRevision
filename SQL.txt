DBMS stands for Database Management System, and RDBMS is the acronym for the Relational Database Management system. 
In DBMS, the data is stored as a file, whereas in RDBMS, data is stored in the form of tables.
SQL supports RDBMS
how to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.
SQL stands for Structured Query Language
SQL lets you access and manipulate databases

======================================
Following are some most important points about the SQL syntax which are to remember:

You can write the keywords of SQL in both uppercase and lowercase, but writing the SQL keywords in uppercase improves the readability of the SQL query.
SQL statements or syntax are dependent on text lines. We can place a single SQL statement on one or multiple text lines.

Syntax of SELECT Statement:

SELECT column_name1, column_name2, .…, column_nameN  
    [ FROM table_name ]  
    [ WHERE condition ]  
    [ ORDER BY order_column_name1 [ ASC | DESC ], .... ];  
	
	...................    ....
	
	



==========================================
What Can SQL do?
SQL can execute queries against a database
SQL can retrieve data from a database
SQL can insert records in a database
SQL can update records in a database
SQL can delete records from a database
SQL can create new databases
SQL can create new tables in a database
SQL can create stored procedures in a database
SQL can create views in a database
SQL can set permissions on tables, procedures, and views

SQL keywords are NOT case sensitive: select is the same as SELECT (UPPERCASE PREFFERED)
Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.

RDBMS
RDBMS stands for Relational Database Management System.

RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.

A database most often contains one or more tables. Each table is identified by a name (e.g. "Customers" or "Orders"). Tables contain records (rows) with data.
The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.
Every table is broken up into smaller entities called fields.
A field is a column in a table that is designed to maintain specific information about every record in the table.
A record, also called a row, is each individual entry that exists in a table.
A record is a horizontal entity in a table.
A column is a vertical entity in a table that contains all information associated with a specific field in a table.

Some of The Most Important SQL Commands
SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index

SYNTAXES

SELECT column1, column2, ...FROM table_name;
SELECT * FROM table_name;

The SELECT DISTINCT statement is used to return only distinct (UNIQUE) values.
	  SELECT DISTINCT Country FROM Customers;
	  SELECT COUNT(DISTINCT Country) FROM Customers;

The SQL WHERE Clause
The WHERE clause is used to filter records.
It is used to extract only those records that fulfill a specified condition.
WHERE Syntax
SELECT column1, column2, ...FROM table_name WHERE condition;

SQL requires single quotes around text values (most database systems will also allow double quotes).
However, numeric fields should not be enclosed in quotes:

SELECT * FROM Customers WHERE Country='Mexico';

Operators in The WHERE Clause
The following operators can be used in the WHERE clause:

Operator Description	
	=		Equal	
	>		Greater than	
	<		Less than	
	>=		Greater than or equal	
	<=		Less than or equal	
	<>		Not equal. Note: In some versions of SQL this operator may be written as !=	
	BETWEEN	Between a certain range								SELECT * FROM Products WHERE Price BETWEEN 50 AND 60;
	LIKE	Search for a pattern								SELECT * FROM Customers WHERE City LIKE 's%';
	IN		To specify multiple possible values for a column 	SELECT * FROM Customers WHERE City IN ('Paris','London');
	
	SELECT * FROM Products WHERE Price NOT BETWEEN 10 AND 20;
	
The SQL AND, OR and NOT Operators
The WHERE clause can be combined with AND, OR, and NOT operators.

SELECT * FROM Customers WHERE Country='Germany' AND City='Berlin';	
SELECT * FROM Customers WHERE City='Berlin' OR City='München';
SELECT * FROM Customers WHERE NOT Country='Germany';
SELECT * FROM Customers WHERE NOT Country='Germany' AND NOT Country='USA';
SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München');

The SQL ORDER BY Keyword
The ORDER BY keyword is used to sort the result-set in ascending or descending order.
The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
SELECT * FROM Customers ORDER BY Country;
SELECT * FROM Customers ORDER BY Country DESC;
SELECT * FROM Customers ORDER BY Country, CustomerName; >This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:
SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;

The SQL INSERT INTO Statement
The INSERT INTO statement is used to insert new records in a table.
INSERT INTO Syntax
It is possible to write the INSERT INTO statement in two ways:
	1. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query.
	   However, make sure the order of the values is in the same order as the columns in the table.
	INSERT INTO table_name VALUES (value1, value2, value3, ...);

	2. Specify both the column names and the values to be inserted:

		INSERT INTO table_name (column1, column2, column3, ...)VALUES (value1, value2, value3, ...);
		
What is a NULL Value?
A field with a NULL value is a field with no value.		
A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!

How to Test for NULL Values?
It is not possible to test for NULL values with comparison operators, such as =, <, or <>. 
We will have to use the IS NULL and IS NOT NULL operators instead.

IS NULL Syntax
SELECT CustomerName, ContactName, Address FROM Customers WHERE Address IS NULL;
SELECT CustomerName, ContactName, Address FROM Customers WHERE Address IS NOT NULL;

DDL (DATA DEFINATIN LANG) > CREATE, REANAME, ALTER, DROP, TRUNCATE
DML (DATA MANUPULATION LANG) > INSERT , UPDATE, DELETE

The SQL UPDATE Statement
The UPDATE statement is used to modify the existing records in a table.
UPDATE Syntax (USE > UPDATE, SET , WHERE)
UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;

Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. 
The WHERE clause specifies which record(s) that should be updated. 
If you omit the WHERE clause, all records in the table will be updated!

The SQL DELETE Statement
The DELETE statement is used to delete existing records in a table.
DELETE Syntax (USE > DELETE, FROM, WHERE)
DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. 
The WHERE clause specifies which record(s) should be deleted. 
If you omit the WHERE clause, all records in the table will be deleted!

It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:
DELETE FROM table_name;

The SELECT TOP clause is used to specify the number of records to return.

The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

Note: Not all database systems support the SELECT TOP clause. 
MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM.
SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;

SQL Aliases
SQL aliases are used to give a table, or a column in a table, a temporary name.
Aliases are often used to make column names more readable.
An alias only exists for the duration of that query.
An alias is created with the AS keyword.

Alias Column Syntax
SELECT column_name AS alias_name
FROM table_name;

The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):

Example
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;

Note: To get the SQL statement above to work in MySQL use the following:

SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address
FROM Customers;

Aliases can be useful when:

There are more than one table involved in a query
Functions are used in the query
Column names are big or not very readable
Two or more columns are combined together

The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). 
We use the "Customers" and "Orders" tables, and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter):

WITHOUT ALIASES
SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName
FROM Customers, Orders
WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;

SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;

The SQL MIN() and MAX() Functions
The MIN() function returns the smallest value of the selected column.

The MAX() function returns the largest value of the selected column.

MIN() Syntax
SELECT MIN(column_name)
FROM table_name
WHERE condition;
MAX() Syntax
SELECT MAX(column_name)
FROM table_name
WHERE condition;

The SQL COUNT(), AVG() and SUM() Functions
The COUNT() function returns the number of rows that matches a specified criterion.

COUNT() Syntax
SELECT COUNT(column_name)
FROM table_name
WHERE condition;

The AVG() function returns the average value of a numeric column. 
AVG() Syntax
SELECT AVG(column_name)
FROM table_name
WHERE condition;

The SUM() function returns the total sum of a numeric column. 
SUM() Syntax
SELECT SUM(column_name)
FROM table_name
WHERE condition;

The SQL LIKE Operator
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards often used in conjunction with the LIKE operator:

 The percent sign (%) represents zero, one, or multiple characters
 The underscore sign (_) represents one, single character
Note: MS Access uses an asterisk (*) instead of the percent sign (%), and a question mark (?) instead of the underscore (_).

The percent sign and the underscore can also be used in combinations!
Tip: You can also combine any number of conditions using AND or OR operators.

		LIKE Operator					Description
		WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
		WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
		WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
		WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
		WHERE CustomerName LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
		WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
		WHERE ContactName  LIKE 'a%o'	Finds any values that start with "a" and ends with "o"

SELECT * FROM Customers WHERE CustomerName NOT LIKE 'a%';

SQL Wildcard Characters
A wildcard character is used to substitute one or more characters in a string.
Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

Wildcard Characters in SQL Server

Symbol	Description	Example
	%	Represents zero or more characters	bl% finds bl, black, blue, and blob
	_	Represents a single character	h_t finds hot, hat, and hit
	
	[]	Represents any single character within the brackets	h[oa]t finds hot and hat, but not hit
	
	^	Represents any character not in the brackets	h[^oa]t finds hit, but not hot and hat
	-	Represents any single character within the specified range	c[a-b]t finds cat and cbt
	
The following SQL statement selects all customers with a City starting with "b", "s", or "p":

Example
SELECT * FROM Customers
WHERE City LIKE '[bsp]%';

The following SQL statement selects all customers with a City starting with "a","b","c","d" or "e":

Example
SELECT * FROM Customers
WHERE City LIKE '[a-e]%';

The two following SQL statements select all customers with a City NOT starting with "b", "s", or "p":

Example
SELECT * FROM Customers
WHERE City LIKE '[!bsp]%';
Or:
Example
SELECT * FROM Customers
WHERE City NOT LIKE '[bsp]%';

The SQL IN Operator
The IN operator allows you to specify multiple values in a WHERE clause.

SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');

The following SQL statement selects all customers that are from the same countries as the suppliers:

Example
SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);

The following SQL statement selects all products with a price between 10 and 20. In addition; do not show products with a CategoryID of 1,2, or 3:

Example
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND CategoryID NOT IN (1,2,3);

The following SQL statement selects all products with a ProductName between Carnarvon Tigers and Mozzarella di Giovanni:

Example
SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

The following SQL statement selects all products with a ProductName not between Carnarvon Tigers and Mozzarella di Giovanni:

Example
SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

The following SQL statement selects all orders with an OrderDate between '01-July-1996' and '31-July-1996':

Example
SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;
OR:

Example
SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';

WHEN u r working on two or more tables the use table_name.col_name

SQL JOIN
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

Here are the different types of the JOINs in SQL:

INNER JOIN: 		Returns records that have matching values in both tables
LEFT (OUTER) JOIN: 	Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: 	Returns all records when there is a match in either left or right table
SELF JOIN

In MySQL we use outer keyword as well
LEFT OUTER JOIN etc.

===================
Inner Join ( USE > FROM, INNER JOIN, ON)
SQL INNER JOIN Keyword
The INNER JOIN keyword selects records that have matching values in both tables.

INNER JOIN Syntax
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

Orders Tables

OrderID	CustomerID	OrderDate
10308	2	        1996-09-18
10309	37	        1996-09-19
10310	77	        1996-09-20

Then, look at a selection from the "Customers" table:

CustomerID	 CustomerName			                ContactName		Country

1	         Alfreds Futterkiste	                Maria Anders	Germany
2	         Ana Trujillo Emparedados y helados	    Ana Trujillo	Mexico
3	         Antonio Moreno Taquería	            Antonio Moreno	Mexico

Here the customer id in orders table refers to the customer id in customer table, so we hv to write Innner Join of Customers
as below;

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;

OrderID	CustomerName						OrderDate
10308	Ana Trujillo Emparedados y helados	9/18/1996

The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match.

LEFT JOIN Syntax
SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;

SQL RIGHT JOIN Keyword
The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match.

RIGHT JOIN Syntax
SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.

Tip: FULL OUTER JOIN and FULL JOIN are the same.

FULL OUTER JOIN Syntax
SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;

=====================
The CREATE DATABASE statement is used to create a new SQL database.

Syntax
CREATE DATABASE databasename;

Make sure you have admin privilege before creating any database. 
Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;

The DROP DATABASE statement is used to drop an existing SQL database.

Syntax
DROP DATABASE databasename;
Once a database is dropped, you can check it in the list of databases with the following SQL command: SHOW DATABASES;

The BACKUP DATABASE statement is used in SQL Server to create a full back up of an existing SQL database.

Syntax

BACKUP DATABASE testDB
TO DISK = 'D:\backups\testDB.bak';

Tip: Always back up the database to a different drive than the actual database. 
Then, if you get a disk crash, you will not lose your backup file along with the database.

The SQL BACKUP WITH DIFFERENTIAL Statement
A differential back up only backs up the parts of the database that have changed since the last full database backup.

Syntax
BACKUP DATABASE databasename
TO DISK = 'filepath'
WITH DIFFERENTIAL;

Tip: A differential back up reduces the back up time (since only the changes are backed up).

520481027775864